{"changed":true,"filter":false,"title":"Graph.cpp","tooltip":"/Graph.cpp","value":"#include <stdio.h>\n#include <stdlib.h>\n#include <vector>\n#include <map>\n#include <string>\n#include <iostream>\n#include <algorithm>\n#include <ctime>        // std::time\n#include <cstdlib>      // std::rand, std::srand\n#include \"Graph.h\"\nusing namespace std;\n\n\nint Graph::containsNode(string node){\n    return graph.count(node);\n}\n\nstring Graph::getStartNode() {\n    std::srand ( unsigned ( std::time(0) ) );\n    vector<string> words;\n    for(outer_map::iterator it = graph.begin(); it != graph.end(); ++it){\n         words.push_back(it->first);\n    }\n    random_shuffle(words.begin(), words.end());\n    return words[0];\n}\n\nvoid Graph::addNode(string node) {\n    map<string, int> inner;\n    if (!containsNode(node)) {\n        graph[node] = inner;\n    }\n}\n\nint Graph::getTotalEdgeWeight(string node) {\n    int result = 0;\n    if (Graph::containsNode(node)) {\n        outer_map::iterator it_out = graph.find(node);\n        for (inner_map::iterator it=it_out->second.begin(); it!=it_out->second.end(); ++it) {\n            result += it->second;\n        }\n    }\n    \n    return result;\n}\n\nvoid Graph::addEdge(string node, string edge) {\n    if (Graph::containsNode(node)) {\n        outer_map::iterator it_out = graph.find(node);\n        inner_map::iterator it = it_out->second.find(edge);\n        if (it!=it_out->second.end()) {\n            it->second++;\n        } else {\n            it_out->second[edge] = 1;\n        }\n    }            \n}\n\nstring Graph::getNext(string node){\n    if(Graph::containsNode(node)){\n        map<string, int> currentEdges = graph[node];\n        float frequency = Graph::getTotalEdgeWeight(node);\n        if(frequency != 0){\n            int currSum = 0;\n            double percent = ((double)rand()/(double)RAND_MAX);\n            for(inner_map::iterator it = currentEdges.begin(); it != currentEdges.end(); ++it){\n                currSum += it->second;\n                if(currSum/frequency > percent){\n                    return it->first;\n                }\n            }\n        }\n        else{\n            return Graph::getStartNode();\n        }\n    }\n    else{\n        return \"ERROR\";\n    }\n\n}\n\n","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":63,"column":28},"end":{"row":63,"column":72},"action":"insert","lines":["g++ -o graph Graph.h Graph.cpp read-text.cpp"],"id":3050}],[{"start":{"row":63,"column":28},"end":{"row":63,"column":72},"action":"remove","lines":["g++ -o graph Graph.h Graph.cpp read-text.cpp"],"id":3051}]]},"ace":{"folds":[],"scrolltop":836,"scrollleft":0,"selection":{"start":{"row":63,"column":28},"end":{"row":63,"column":28},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":51,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1474577170780}